<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>An elder's memo.</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Recurrent Neural Networks with External Memory</title>
				<description>&lt;p&gt;&lt;a class=&quot;btn btn-default&quot; href=&quot;https://github.com/npow/RNN-EM&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;external-memory-read&quot;&gt;External memory read&lt;/h2&gt;
&lt;p&gt;RNN-EM has an external memory &lt;span class=&quot;math inline&quot;&gt;\(M_t \in R^{m\times n}\)&lt;/span&gt;. It can be considered as a memory with &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; slots and each slot is a vector with &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; elements. Similar to the external memory in computers, the memory capacity of RNN-EM may be increased if using a large &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The model generates a key vector &lt;span class=&quot;math inline&quot;&gt;\(k_t\)&lt;/span&gt; to search for content in the external memory. Though there are many possible ways to generate the key vector, we choose a simple linear function that relates hidden layer activity &lt;span class=&quot;math inline&quot;&gt;\(h_t\)&lt;/span&gt; as follows &lt;span class=&quot;math display&quot;&gt;\[
k_t=W_kh_t
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(W_k\in R^{m\times p}\)&lt;/span&gt; is a linear transformation matrix. Our intuition is that the memory should be in the same space of or affine to the hidden layer activity.&lt;/p&gt;
&lt;p&gt;We use cosine distance &lt;span class=&quot;math inline&quot;&gt;\(K(u,v)={u\cdot v \over ||u||||v||}\)&lt;/span&gt; to compare this key vector with contents in the external memory. The weight for the &lt;span class=&quot;math inline&quot;&gt;\(c\)&lt;/span&gt;-th slot &lt;span class=&quot;math inline&quot;&gt;\(M_t(:,c)\)&lt;/span&gt; in memory &lt;span class=&quot;math inline&quot;&gt;\(M_t\)&lt;/span&gt; is computed as follows &lt;span class=&quot;math display&quot;&gt;\[
\hat w_t(c)=\frac{exp\beta_tK(k_t,M_t(:,c))}{\sum_qexp\beta_tK(k_t,M_t(:,q))}
\]&lt;/span&gt; where the above weight is normalized and sums to 1.0. &lt;span class=&quot;math inline&quot;&gt;\(\beta_t\)&lt;/span&gt; is a scalar larger than 0.0. It sharpens the weight vector when &lt;span class=&quot;math inline&quot;&gt;\(\beta_t\)&lt;/span&gt; is larger than 1.0. Conversely, it smooths or dampens the weight vector when &lt;span class=&quot;math inline&quot;&gt;\(\beta_t\)&lt;/span&gt; is between 0.0 and 1.0. We use the following function to obtain &lt;span class=&quot;math inline&quot;&gt;\(\beta_t\)&lt;/span&gt;; &lt;span class=&quot;math display&quot;&gt;\[
\beta_t=log(1+exp(W_\beta h_t))
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(W_\beta\in R^{1\times p}\)&lt;/span&gt; maps the hidden layer activity &lt;span class=&quot;math inline&quot;&gt;\(h_t\)&lt;/span&gt; to a scalar.&lt;/p&gt;
&lt;p&gt;Importantly, we also use a scalar coefficient &lt;span class=&quot;math inline&quot;&gt;\(g_t\)&lt;/span&gt; to interpolate the above weight estimate with the past weight as follows &lt;span class=&quot;math display&quot;&gt;\[
w_t=(1-g_t)w_{t-1}+g_t\hat w_t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The memory content is retrieved from the external memory at time &lt;span class=&quot;math inline&quot;&gt;\(t-1\)&lt;/span&gt; using &lt;span class=&quot;math display&quot;&gt;\[
c_t=M_{t-1}w_{t-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;external-memory-update&quot;&gt;External memory update&lt;/h2&gt;
&lt;p&gt;RNN-EM generates a new content vector &lt;span class=&quot;math inline&quot;&gt;\(v_t\)&lt;/span&gt; to be added to its memory &lt;span class=&quot;math display&quot;&gt;\[
v_t=W_vh_t
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(W_v\in R^{m\times p}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;RNN-EM has a forget gate as follows &lt;span class=&quot;math display&quot;&gt;\[
f_t=1-w_t\odot e_t
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(e_t\in R^{n\times 1}\)&lt;/span&gt; is an erase vector, generated as &lt;span class=&quot;math inline&quot;&gt;\(e_t=\sigma(W_{he}h_t)\)&lt;/span&gt;. Notice that the &lt;span class=&quot;math inline&quot;&gt;\(c\)&lt;/span&gt;-th element in the forget gate is zero only if both read weight &lt;span class=&quot;math inline&quot;&gt;\(w_t\)&lt;/span&gt; and erase vector &lt;span class=&quot;math inline&quot;&gt;\(e_t\)&lt;/span&gt; have their &lt;span class=&quot;math inline&quot;&gt;\(c\)&lt;/span&gt;-th element set to one. Therefore, memory cannot be forgotten if it is not to be read.&lt;/p&gt;
&lt;p&gt;RNN-EM has an update gate &lt;span class=&quot;math inline&quot;&gt;\(u_t\)&lt;/span&gt;. It simply uses the weight &lt;span class=&quot;math inline&quot;&gt;\(w_t\)&lt;/span&gt; as follows &lt;span class=&quot;math display&quot;&gt;\[
u_t=w_t
\]&lt;/span&gt; Therefore, memory is only updated if it is to be read.&lt;/p&gt;
&lt;p&gt;With the above described two gates, the memory is updated as follows &lt;span class=&quot;math display&quot;&gt;\[
M_t=diag(f_t)M_{t-1}+diag(u_t)v_t
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(diag(\cdot)\)&lt;/span&gt; transforms a vector to a diagonal matrix with diagonal elements from the vector.&lt;/p&gt;
&lt;p&gt;Notice that when the number of memory slots is small, it may have similar performances as a geted RNN.&lt;/p&gt;
</description>
				<pubDate>Tue, 03 May 2016 00:00:00 +0800</pubDate>
				<link>/deep%20learning/rnn/2016/05/03/rnn-em.html</link>
				<guid isPermaLink="true">/deep%20learning/rnn/2016/05/03/rnn-em.html</guid>
			</item>
		
			<item>
				<title>Reinforcement Learning</title>
				<description>&lt;h2 id=&quot;rewards&quot;&gt;Rewards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;reward&lt;/code&gt; &lt;span class=&quot;math inline&quot;&gt;\(R_t\)&lt;/span&gt; is a scalar feedback signal&lt;/li&gt;
&lt;li&gt;Indecates how well agent is doing at step &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;The agent’s job is to maximise cumulative reward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reinforcement learning is based on the &lt;code&gt;reward hypothesis&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All goals can be described by the maximisation of expected cumulative reward&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;information-statea.k.a-markov-state&quot;&gt;Information State(a.k.a Markov state)&lt;/h2&gt;
&lt;p&gt;A state &lt;span class=&quot;math inline&quot;&gt;\(S_t\)&lt;/span&gt; is &lt;code&gt;Markov&lt;/code&gt; if and only if &lt;span class=&quot;math display&quot;&gt;\[
\Bbb P[S_{t+1}|S_t]=\Bbb P[S_{t+1}|S_1,...,S_t]
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The future is independent of the past given the present&lt;/li&gt;
&lt;li&gt;Once the state is known, the history may be thrown away&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;markov-decision-processes&quot;&gt;Markov Decision Processes&lt;/h2&gt;
&lt;h3 id=&quot;markov-processes&quot;&gt;Markov Processes&lt;/h3&gt;
&lt;h4 id=&quot;state-transition-matrix&quot;&gt;State Transition Matrix&lt;/h4&gt;
&lt;p&gt;For a Markov state &lt;span class=&quot;math inline&quot;&gt;\(\mathcal s\)&lt;/span&gt; and successor state &lt;span class=&quot;math inline&quot;&gt;\(\mathcal s&amp;#39;\)&lt;/span&gt;, the &lt;em&gt;state transition probability&lt;/em&gt; is defined by &lt;span class=&quot;math display&quot;&gt;\[
\mathcal P_{\mathcal s\mathcal s&amp;#39;}=\Bbb P[\mathcal S_{t+1}=\mathcal s&amp;#39;|\mathcal S_t=\mathcal s]
\]&lt;/span&gt; State transition matrix &lt;span class=&quot;math inline&quot;&gt;\(\mathcal P\)&lt;/span&gt; defines transition probabilities from all states &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt; to all successor states &lt;span class=&quot;math inline&quot;&gt;\(\mathcal s&amp;#39;\)&lt;/span&gt;, &lt;span class=&quot;math display&quot;&gt;\[
\mathcal P=\text{from}
\begin{array}{c}
\text{to} \\
\begin{bmatrix}
\mathcal P_{11} &amp;amp; \cdots &amp;amp; \mathcal P_{1n} \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\
\mathcal P_{n1} &amp;amp; \cdots &amp;amp; \mathcal P_{nn}
\end{bmatrix}
\end{array}
\]&lt;/span&gt; where each row of the matrix sums to 1.&lt;/p&gt;
&lt;h4 id=&quot;markov-process&quot;&gt;Markov Process&lt;/h4&gt;
&lt;p&gt;A Markov process is a memoryless random process, i.e. a sequence of random states &lt;span class=&quot;math inline&quot;&gt;\(\mathcal S_1,\mathcal S_2,...\)&lt;/span&gt; with the Markov property.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Markov Process(or Markov Chain)&lt;/em&gt; is a tuple &lt;span class=&quot;math inline&quot;&gt;\(\left&amp;lt;\mathcal S,\mathcal P\right&amp;gt;\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal S\)&lt;/span&gt; is a (finite) set of states&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal P\)&lt;/span&gt; is state transition probability matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;markov-reward-process&quot;&gt;Markov Reward Process&lt;/h3&gt;
&lt;p&gt;A Markov reward process is a Markov chain with values.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Markov Reward Process&lt;/em&gt; is a tuple &lt;span class=&quot;math inline&quot;&gt;\(\left&amp;lt;\mathcal S,\mathcal P,\mathcal R,\gamma\right&amp;gt;\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal S\)&lt;/span&gt; is a finite set of states&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal P\)&lt;/span&gt; is a state transition probability matrix&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal R\)&lt;/span&gt; is a reward function, &lt;span class=&quot;math inline&quot;&gt;\(\mathcal R_s=\Bbb E[R_{t+1}|\mathcal S_t=\mathcal s]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\gamma\)&lt;/span&gt; is a discount factor, &lt;span class=&quot;math inline&quot;&gt;\(\gamma \in [0,1]\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;return&quot;&gt;Return&lt;/h4&gt;
&lt;p&gt;The return &lt;span class=&quot;math inline&quot;&gt;\(G_t\)&lt;/span&gt;(Goal) is the total discounted reward from time-step &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;. &lt;span class=&quot;math display&quot;&gt;\[
G_t=R_{t+1}+\gamma R_{t+2}+...=\sum_{k=0}^\infty \gamma^kR_{t+k+1}
\]&lt;/span&gt; The discount &lt;span class=&quot;math inline&quot;&gt;\(\gamma\in[0,1]\)&lt;/span&gt; is the present value of future rewords.&lt;/p&gt;
&lt;h4 id=&quot;value-function&quot;&gt;Value Function&lt;/h4&gt;
&lt;p&gt;The value function &lt;span class=&quot;math inline&quot;&gt;\(v(s)\)&lt;/span&gt; gives the long-term value of state &lt;span class=&quot;math inline&quot;&gt;\(\mathcal s\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;state value function&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(v(s)\)&lt;/span&gt; of an MRP is the expected &lt;code&gt;Return&lt;/code&gt; starting from state &lt;span class=&quot;math inline&quot;&gt;\(\mathcal s\)&lt;/span&gt; &lt;span class=&quot;math display&quot;&gt;\[
v(s)=\Bbb E[G_t|\mathcal S_t=\mathcal s]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;bellman-equation-for-mrps&quot;&gt;Bellman Equation for MRPs&lt;/h4&gt;
&lt;p&gt;The value function can be decomposed into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immediate reward &lt;span class=&quot;math inline&quot;&gt;\(R_{t+1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;discounted value of successor state &lt;span class=&quot;math inline&quot;&gt;\(\gamma v(S_{t+1})\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\begin{align}
v(s) &amp;amp;= \Bbb E[G_t|S_t=s] \\
&amp;amp;= \Bbb E[R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+...|S_t=s] \\
&amp;amp;= \Bbb E[R_{t+1}+\gamma(R_{t+2}+\gamma R_{t+3}+...)|S_t=s] \\
&amp;amp;= \Bbb E[R_{t+1}+\gamma G_{t+1}|S_t=s] \\
&amp;amp;= \Bbb E[R_{t+1}+\gamma v(S_{t+1})|S_t=s]
\end{align}
\]&lt;/span&gt; &lt;span class=&quot;math display&quot;&gt;\[
v(s)=\mathcal R_s+\gamma \sum_{s&amp;#39;\in\mathcal S} \mathcal P_{ss&amp;#39;}v(s&amp;#39;)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;bellman-equation-in-matrix-form&quot;&gt;Bellman Equation in Matrix Form&lt;/h4&gt;
&lt;p&gt;The Bellman equation can be expressed concisely using matrices, &lt;span class=&quot;math display&quot;&gt;\[
v=\mathcal R+\gamma \mathcal Pv
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt; is a column vector with one entry per state &lt;span class=&quot;math display&quot;&gt;\[
\begin{bmatrix}
v(1) \\
\vdots \\
v(n)
\end{bmatrix}
=
\begin{bmatrix}
\mathcal R_1 \\
\vdots \\
\mathcal R_n
\end{bmatrix}
+\gamma \begin{bmatrix}
\mathcal P_{11} &amp;amp; \cdots &amp;amp; \mathcal P_{1n} \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\
\mathcal P_{n1} &amp;amp; \cdots &amp;amp; \mathcal P_{nn}
\end{bmatrix}
\begin{bmatrix}
v(1) \\
\vdots \\
v(n)
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sloving-the-bellman-equation&quot;&gt;Sloving the Bellman Equation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Bellman equation is a linear equation&lt;/li&gt;
&lt;li&gt;It can be solved directly: &lt;span class=&quot;math display&quot;&gt;\[
\begin{align}
v &amp;amp;= \mathcal R+\gamma\mathcal Pv \\
(I-\gamma\mathcal P)v &amp;amp;=\mathcal R \\
v &amp;amp;= (I-\gamma\mathcal P)^{-1}\mathcal R
\end{align}
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Computational complexity is &lt;span class=&quot;math inline&quot;&gt;\(O(n^3)\)&lt;/span&gt; for &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; states&lt;/li&gt;
&lt;li&gt;Direct solution only possible for small MRPs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;markov-decision-process&quot;&gt;Markov Decision Process&lt;/h3&gt;
&lt;p&gt;A Markov decision process(MDP) is a Markov reward process with decisions. It is an environment in which all states are Markov.&lt;/p&gt;
&lt;p&gt;A Markov Decision Process is a tuple &lt;span class=&quot;math inline&quot;&gt;\(\left&amp;lt;\mathcal S,\mathcal A,\mathcal P,\mathcal R,\gamma\right&amp;gt;\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal A\)&lt;/span&gt; is a finite set of actions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;policies&quot;&gt;Policies&lt;/h4&gt;
&lt;p&gt;A policy &lt;span class=&quot;math inline&quot;&gt;\(\pi\)&lt;/span&gt; is a distribution over actions given states &lt;span class=&quot;math display&quot;&gt;\[
\pi(a|s)=\Bbb P[A_t=a|S_t=s]
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A policy fully defines the behaviour of an agent&lt;/li&gt;
&lt;li&gt;MDP policies depend on the current state (not the history)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;value-function-1&quot;&gt;Value Function&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;state-value function&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(v_\pi(s)\)&lt;/span&gt; of an MDP is the expected return starting from state &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;, and then following policy &lt;span class=&quot;math inline&quot;&gt;\(\pi\)&lt;/span&gt; &lt;span class=&quot;math display&quot;&gt;\[
v_\pi(s)=\Bbb E_\pi[G_t|S_t=s]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;action-value function&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(q_\pi(s,a)\)&lt;/span&gt; is the expected return starting from state &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;, taking action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;, and then following policy &lt;span class=&quot;math inline&quot;&gt;\(\pi\)&lt;/span&gt; &lt;span class=&quot;math display&quot;&gt;\[
q_\pi(s,a)=\Bbb E_\pi[G_t|S_t=s,A_t=a]
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;bellman-expectation-equation&quot;&gt;Bellman Expectation Equation&lt;/h4&gt;
&lt;p&gt;The state-value function can again be decomposed into immediate reward plus discounted value of successor state &lt;span class=&quot;math display&quot;&gt;\[
\begin{align}
v_\pi(s) &amp;amp;= \Bbb E_\pi[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s] \\
&amp;amp;=\sum_{a\in\mathcal A} \pi(a|s)q_\pi(s,a)
\end{align}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The action-value function can similarly be decomposed, &lt;span class=&quot;math display&quot;&gt;\[
\begin{align}
q_\pi(s,a) &amp;amp;= \Bbb E_\pi[R_{t+1}+\gamma q_\pi(S_{t+1},A_{t+1})|S_t=s,A_t=a] \\
&amp;amp;= \mathcal R_s^a + \gamma\sum_{s&amp;#39;\in\mathcal S} \mathcal P_{ss&amp;#39;}^a v_\pi(s&amp;#39;)
\end{align}
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;bellman-expectation-equation-matrix-form&quot;&gt;Bellman Expectation Equation (Matrix Form)&lt;/h4&gt;
&lt;p&gt;The Bellman expectation equation can be expressed concisely using the induced MRP, &lt;span class=&quot;math display&quot;&gt;\[
v_\pi=\mathcal R^\pi + \gamma \mathcal P^\pi v_\pi
\]&lt;/span&gt; with direct solution &lt;span class=&quot;math display&quot;&gt;\[
v_\pi=(I-\gamma\mathcal P^\pi)^{-1}\mathcal R^\pi
\]&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;optimal-value-function&quot;&gt;Optimal Value Function&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;optimal state-value function&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(v_*(s)\)&lt;/span&gt; is the maximum value function over all policies &lt;span class=&quot;math display&quot;&gt;\[
v_*(s)=max_\pi v_\pi(s)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;optimal action-value function&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(q_*(s,a)\)&lt;/span&gt; is the maximum action-value function over all policies &lt;span class=&quot;math display&quot;&gt;\[
q_*(s,a)=max_\pi q_\pi(s,a)
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The optimal value function specifies the best possible performance in the MDP.&lt;/li&gt;
&lt;li&gt;An MDP is “solved” when we know the optimal value fn.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 03 May 2016 00:00:00 +0800</pubDate>
				<link>/reinforcement/2016/05/03/reinforcement-learning.html</link>
				<guid isPermaLink="true">/reinforcement/2016/05/03/reinforcement-learning.html</guid>
			</item>
		
			<item>
				<title>A Full Hardware Guide to Deep Learning</title>
				<description>&lt;p&gt;&lt;a class=&quot;btn btn-default&quot; href=&quot;http://timdettmers.com/2015/03/09/deep-learning-hardware-guide/&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GPU&lt;/strong&gt;: GTX 680 or GTX 960 (no money); GTX 980 (best performance); GTX Titan (if you need memory); GTX 970 (no convolutional nets)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CPU&lt;/strong&gt;: Two threads per GPU; full 40 PCIe lanes and correct PCIe spec (same as your motherboard); &amp;gt; 2GHz; cache does not matter;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAM&lt;/strong&gt;: Use asynchronous mini-batch allocation; clock rate and timings do not matter; buy at least as much CPU RAM as you have GPU RAM;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hard drive/SSD&lt;/strong&gt;: Use asynchronous batch-file reads and compress your data if you have image or sound data; a hard drive will be fine unless you work with 32 bit floating point data sets with large input dimensions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Power supply unit(PSU)&lt;/strong&gt;: Add up watts of GPUs + CPU + (100-300) for required power; get high efficiency rating if you use large conv nets; make sure it has enough PCIe connectors (6+8pins) and watts for your (future) GPUs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cooling&lt;/strong&gt;: Set coolbits flag in your config if you run a single GPU; otherwise flashing BIOS for increased fan speeds is easiest and cheapest; use water cooling for multiple GPUs and/or when you need to keep down the noise (you work with other people in the same room)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motherboard&lt;/strong&gt;: Get PCIe 3.0 and as many slots as you need for your (future) GPUs (one GPU takes two slots; max 4 GPUs per system)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monitors&lt;/strong&gt;: If you want to upgrade your system to be more productive, it might make more sense to buy an additional monitor rather than upgrading your GPU&lt;/p&gt;
</description>
				<pubDate>Wed, 13 Apr 2016 00:00:00 +0800</pubDate>
				<link>/deep%20learning/tools/2016/04/13/a-full-hardware-guide-to-deep-learning.html</link>
				<guid isPermaLink="true">/deep%20learning/tools/2016/04/13/a-full-hardware-guide-to-deep-learning.html</guid>
			</item>
		
			<item>
				<title>Introduction to debugging neural networks</title>
				<description>&lt;p&gt;&lt;a class=&quot;btn btn-default&quot; href=&quot;http://russellsstewart.com/notes/0.html&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following advice is targeted at beginners to neural networks, and is based on my experience giving advice to neural net newcomers in industry and at Stanford. Neural nets are fundamentally harder to debug than most programs, because most neural net bugs don’t result in type errors or runtime errors. They just cause poor convergence. Especially when you’re new, this can be very frustrating! But an experienced neural net trainer will be able to systematically overcome the difficulty in spite of the ubiquitous and seemingly ambiguous error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Performance Error: your neural net did not train well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To the uninitiated, the message is daunting. But to the experienced, this is a great error. It means the boilerplate coding is out of the way, and it’s time to dig in!&lt;/p&gt;
&lt;h2 id=&quot;how-to-deal-with-nans&quot;&gt;How to deal with NaNs&lt;/h2&gt;
&lt;p&gt;By far the most common first question I get from students is, “Why am I getting NaNs.” Occasionally, this has a complicated answer. But most often, the NaNs come in the first 100 iterations, and the answer is simple: your learning rate is too high. When the learning rate is very high, you will get NaNs in the first 100 iterations of training. Try reducing the learning rate by a factor of 3 until you no longer get NaNs in the first 100 iterations. As soon as this works, you’ll have a pretty good learning rate to get started with. In my experience, the best heavily validated learning rates are 1-10x below the range where you get NaNs.&lt;/p&gt;
&lt;p&gt;If you are getting NaNs beyond the first 100 iterations, there are 2 further common causes. 1) If you are using RNNs, make sure that you are using “gradient clipping”, which caps the global L2 norm of the gradients. RNNs tend to produce gradients early in training where 10% or fewer of the batches have learning spikes, where the gradient magnitude is very high. Without clipping, these spikes can cause NaNs. 2) If you have written any custom layers yourself, there is a good chance your own custom layer is causing the problems in a division by zero scenario. Another notoriously NaN producing layer is the softmax layer. The softmax computation involves an exp(x) term in both the numerator and denominator, which can divide Inf by Inf and produce NaNs. Make sure you are using a stabilized softmax implementation.&lt;/p&gt;
&lt;h2 id=&quot;what-to-do-when-your-neural-net-isnt-learning-anything&quot;&gt;What to do when your neural net isn’t learning anything&lt;/h2&gt;
&lt;p&gt;Once you stop getting NaNs, you are often rewarded with a neural net that runs smoothly for many thousand iterations, but never reduces the training loss after the initial fidgeting of the first few hundred iterations. When you’re first constructing your code base, waiting for more than 2000 iterations is rarely the answer. This is not because all networks can start learning in under 2000 iterations. Rather, the chance you’ve introduced a bug when coding up a network from scratch is so high that you’ll want to go into a special early debugging mode before waiting on high iteration counts. The name of the game here is to reduce the scope of the problem over and over again until you have a network that trains in less than 2000 iterations. Fortunately, there are always 2 good dimensions to reduce complexity.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Reduce the size of the training set to 10 instances. Working neural nets can usually overfit to 10 instances within just a few hundred iterations. Many coding bugs will prevent this from happening. If you’re network is not able to overfit to 10 instances of the training set, make sure your data and labels are hooked up correctly. Try reducing the batch size to 1 to check for batch computation errors. Add print statements throughout the code to make sure things look like you expect. Usually, you’ll be able to find these bugs through sheer brute force. Once you can train on 10 instances, try training on&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;100&quot; type=&quot;1&quot;&gt;
&lt;li&gt;If this works okay, but not great, you’re ready for the next step.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Solve the simplest version of the problem that you’re interested in. If you’re translating sentences, try to build a language model for the target language first. Once that works, try to predict the first word of the translation given only the first 3 words of the source. If you’re trying to detect objects in images, try classifying the number of objects in each image before training a regression network. There is a trade-off between getting a good sub-problem you’re sure the network can solve, and spending the least amount of time plumbing the code to hook up the appropriate data. Creativity will help here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trick to scaling up a neural net for a new idea is to slowly relax the simplifications made in the above two steps. This is a form of coordinate ascent, and it works great. First, you show that the neural net can at least memorize a few examples. Then you show that it’s able to really generalize to the validation set on a dumbed down version of the problem. You slowly up the difficulty while making steady progress. It’s not as fun as hotshotting it the first time Karpathy style, but at least it works. At some point, you’ll find the problem is difficult enough that it can no longer be learned in 2000 iterations. That’s great! But it should rarely take more than 10 times the iterations of the previous complexity level of the problem. If you’re finding that to be the case, try to search for an intermediate level of complexity.&lt;/p&gt;
&lt;h2 id=&quot;tuning-hyperparameters&quot;&gt;Tuning hyperparameters&lt;/h2&gt;
&lt;p&gt;Now that your networks is learning things, you’re probably in pretty good shape. But you may find that your network is just not capable of solving the most difficult versions of your problem. Hyperparameter tuning will be key here. Some people who just download a CNN package and ran it on their dataset will tell you hyperparameter tuning didn’t make a difference. Realize that they’re solving an existing problem with an existing architecture. If you’re solving a new problem that demands a new architecture, hyperparameter tuning to get within the ballpark of a good setting is a must. You’re best bet is to read a hyperparameter tutorial for your specific problem, but I’ll list a few basic ideas here for completeness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visualization is key. Don’t be afraid to take the time to write yourself nice visualization tools throughout training. If your method of visualization is watching the loss bump around from the terminal, consider an upgrade.&lt;/li&gt;
&lt;li&gt;Weight initializations are important. Generally, larger magnitude initial weights are a good idea, but too large will get you NaNs. Thus, weight initialization will need to be simultaneously tuned with the learning rate.&lt;/li&gt;
&lt;li&gt;Make sure the weights look “healthy”. To learn what this means, I recommend opening weights from existing networks in an ipython notebook. Take some time to get used to what weight histograms should look like for your components in mature nets trained on standard datasets like ImageNet or the Penn Tree Bank.&lt;/li&gt;
&lt;li&gt;Neural nets are not scale invariant w.r.t. inputs, especially when trained with SGD rather than second order methods, as SGD is not a scale-invariant method. Take the time to scale your input data and output labels in the same way that others before you have scaled them.&lt;/li&gt;
&lt;li&gt;Decreasing your learning rate towards the end of training will almost always give you a boost. The best decay schedules usually take the form: after k epochs, divide the learning rate by 1.5 every n epochs, where &lt;span class=&quot;math inline&quot;&gt;\(k &amp;gt; n\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use hyperparameter config files, although it’s okay to put hyperparameters in the code until you start trying out different values. I use json files that I load in with a command line argument as in &lt;a href=&quot;https://github.com/Russell91/tensorbox&quot; class=&quot;uri&quot;&gt;https://github.com/Russell91/tensorbox&lt;/a&gt;, but the exact format is not important. Avoid the urge to refactor your code as it becomes a hyperparameter loading mess! Refactors introduce bugs that cost you training cycles, and can be avoided until after you have a network you like.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Randomize your hyperparameter search if you can afford it. Random search generates hyperparmeter combinations you wouldn’t have thought of and removes a great deal of effort once your intuition is already trained on how to think about the impact of a given hyperparameter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Debugging neural nets can be more laborious than traditional programs because almost all errors get projected onto the single dimension of overall network performance. Nonetheless, binary search is still your friend. By alternately 1) changing the difficulty of your problem, and 2) using a small number of training examples, you can quickly work through the initial bugs. Hyperparameter tuning and long periods of diligent waiting will get you the rest of the way.&lt;/p&gt;
</description>
				<pubDate>Mon, 11 Apr 2016 00:00:00 +0800</pubDate>
				<link>/deep%20learning/tricks/2016/04/11/introduction-to-debugging-neural-networks.html</link>
				<guid isPermaLink="true">/deep%20learning/tricks/2016/04/11/introduction-to-debugging-neural-networks.html</guid>
			</item>
		
			<item>
				<title>Iterables, Iterators and Generators</title>
				<description>&lt;h2 id=&quot;iterators&quot;&gt;Iterators&lt;/h2&gt;
&lt;p&gt;Iterators are iterables with some kind of ‘position’ state and a &lt;code&gt;.__next__()&lt;/code&gt;method. The &lt;code&gt;.__next__()&lt;/code&gt; method may be called to produce the next item and update the internal state.&lt;/p&gt;
&lt;p&gt;Iterables are objects that produce an iterator when they are passed to the &lt;code&gt;iter()&lt;/code&gt; builtin.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/images/36.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Calling &lt;code&gt;iter()&lt;/code&gt; on our “classic” iterable object produces a plain iterator instance&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;iter&lt;/span&gt;(lucky)
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;iterator at &lt;span class=&quot;bn&quot;&gt;0x288cc10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;a-better-iterable-class&quot;&gt;A better iterable class&lt;/h3&gt;
&lt;p&gt;You can choose the iterator that will be returned by &lt;code&gt;iter()&lt;/code&gt; by defining your own &lt;code&gt;.__iter__()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Countdown(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__iter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;co&quot;&gt;# must return an iterator!&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;iter&lt;/span&gt;([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;launch&amp;#39;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;iterators-the-hard-way&quot;&gt;Iterators the hard way&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CountdownIterator(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._remaining &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;launch&amp;#39;&lt;/span&gt;]

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__iter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__next__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._remaining:
            &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;StopIteration&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._remaining.pop(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;/h2&gt;
&lt;p&gt;A generator function is a simpler way to create an iterator.&lt;/p&gt;
&lt;p&gt;Generator functions let you use local variables and the position of the program counter as state for a generator object. A new generator object is created and returned each time you call a generator function. The generator object is an iterator.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/images/37.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; countdown_generator():
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;launch&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;.__iter__()&lt;/code&gt; method of our class can be written as a generator function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Countdown(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__iter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;launch&amp;#39;&lt;/span&gt;]:
            &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; n

&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; Countdown():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(n)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
				<pubDate>Fri, 08 Apr 2016 00:00:00 +0800</pubDate>
				<link>/python/2016/04/08/iterables-iterators-and-generators.html</link>
				<guid isPermaLink="true">/python/2016/04/08/iterables-iterators-and-generators.html</guid>
			</item>
		
			<item>
				<title>GloVe</title>
				<description>&lt;blockquote&gt;
&lt;p&gt;Glove uses the matrix of word-word co-occurrence to produce the word vector, while word2vec using the local window context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;statistics of word occurrences&lt;/strong&gt; in a corpus is the &lt;strong&gt;primary source&lt;/strong&gt; of information available to all unsupervised methods for &lt;strong&gt;learning word representations&lt;/strong&gt;, and although many such methods now exist, the question still remains as to &lt;strong&gt;how meaning is generated from these statistics&lt;/strong&gt;, and &lt;strong&gt;how the resulting word vectors might represent that meaning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; denote the matrix of word-word co-occurrence counts, the entries &lt;span class=&quot;math inline&quot;&gt;\(X_{ij}\)&lt;/span&gt; tabulate the number of times word &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; occurs in the context of word &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;. Let &lt;span class=&quot;math inline&quot;&gt;\(X_i=\sum_k X_{ik}\)&lt;/span&gt; be the nubmer of times any word appears in the context of word &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;. Let &lt;span class=&quot;math inline&quot;&gt;\(P_{ij}=P(j|i)={X_{ij} \over X_i}\)&lt;/span&gt; be the probability that word &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; appear in the context of word &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We take &lt;span class=&quot;math inline&quot;&gt;\(i=ice\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(j=steam\)&lt;/span&gt;, for words &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; related to &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; but not &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt;, say &lt;span class=&quot;math inline&quot;&gt;\(k=solid\)&lt;/span&gt;, we expect the ratio &lt;span class=&quot;math inline&quot;&gt;\(P_{ik} \over P_{jk}\)&lt;/span&gt; will be large. Similarly, say &lt;span class=&quot;math inline&quot;&gt;\(k=gas\)&lt;/span&gt;, the ratio should be small. For words &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; like &lt;span class=&quot;math inline&quot;&gt;\(water\)&lt;/span&gt; or &lt;span class=&quot;math inline&quot;&gt;\(fashion\)&lt;/span&gt;, that are either related to both &lt;span class=&quot;math inline&quot;&gt;\(ice\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(steam\)&lt;/span&gt;, or to neither, the ratio should be close to &lt;strong&gt;one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Noting that the ratio &lt;span class=&quot;math inline&quot;&gt;\(P_{ik} \over P_{jk}\)&lt;/span&gt; depends on three words &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;, the most general model takes the form: &lt;span class=&quot;math display&quot;&gt;\[
F(w_i,w_j,\tilde w_k)={P_{ik} \over P_{jk}}\tag{1}
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(w\in\Bbb R^d\)&lt;/span&gt; are word vectors and &lt;span class=&quot;math inline&quot;&gt;\(\tilde w\in\Bbb R^d\)&lt;/span&gt; are separate context word vectors. &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; may depend on some as-of-yet unspecified parameters, and the number of possibilites for &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; is vast.&lt;/p&gt;
&lt;p&gt;Since &lt;strong&gt;vector spaces are inherently linear structures&lt;/strong&gt;, the most natural way to do this is with vector differences. With this aim, we can restrict our consideration to those functions &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; that depend only on the difference of the two target words, modifying Eqn.(1) to: &lt;span class=&quot;math display&quot;&gt;\[
F(w_i-w_j,\tilde w_k)={P_{ik}\over P_{jk}}\tag{2}
\]&lt;/span&gt; note that the arguments of &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; are vectors while the right-hand side is a scalar. While &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; could be taken to be a complicated function parameterized by, e.g., a neural network, doing so would obfuscate the linear structure we are trying to capture. To avoid this issue, we can first take the dot product of the arguments: &lt;span class=&quot;math display&quot;&gt;\[
F((w_i-w_j)^T\tilde w_k)={P_{ik}\over P_{jk}}\tag{3}
\]&lt;/span&gt; which prevents &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; from mixing the vector dimensions in undesirable ways.&lt;/p&gt;
&lt;p&gt;Note that for word-word co-occurrence matrices, the distinction between a word a context word is arbitrary and that we are free to exchange the two roles. To do so consistently, we must not only exchange &lt;span class=&quot;math inline&quot;&gt;\(w\leftrightarrow \tilde w\)&lt;/span&gt; but also &lt;span class=&quot;math inline&quot;&gt;\(X\leftrightarrow X^T\)&lt;/span&gt;. Our final model should be invariant under this relabeling, but Eqn.(3) is not. However, the &lt;strong&gt;symmetry&lt;/strong&gt; can be restored in two steps. First, we require that &lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt; be a homomorphism between the group &lt;span class=&quot;math inline&quot;&gt;\((\Bbb R, +)\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\((\Bbb R_{&amp;gt;0}, \times)\)&lt;/span&gt;, i.e., &lt;span class=&quot;math display&quot;&gt;\[
F((w_i-w_j)^T\tilde w_k)={F(w^T_i\tilde w_k)\over F(w^T_j\tilde w_k)}\tag{4}
\]&lt;/span&gt; which, by Eqn.(3), is solved by: &lt;span class=&quot;math display&quot;&gt;\[
F(w^T_i\tilde w_k)=P_{ik}={X_{ik}\over X_i}\tag{5}
\]&lt;/span&gt; The solution to Eqn.(4) is &lt;span class=&quot;math inline&quot;&gt;\(F=exp\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
e^{(w_i-w_j)^T\tilde w_k}={e^{w^T_i\tilde w_k}\over e^{w^T_j\tilde w_k}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
w^T_i\tilde w_k=log(P_{ik})=log(X_{ik})-log(X_i)\tag{6}
\]&lt;/span&gt; Note that Eqn.(6) would exhibit the exchange symmetry if not for the &lt;span class=&quot;math inline&quot;&gt;\(log(X_i)\)&lt;/span&gt; on the right-hand side. However, this term is independent for &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; so it can be absorbed into a bias &lt;span class=&quot;math inline&quot;&gt;\(b_i\)&lt;/span&gt; for &lt;span class=&quot;math inline&quot;&gt;\(w_i\)&lt;/span&gt;. Finally, adding an additional bias &lt;span class=&quot;math inline&quot;&gt;\(\tilde b_k\)&lt;/span&gt; for &lt;span class=&quot;math inline&quot;&gt;\(\tilde w_k\)&lt;/span&gt; restores the symmetry: &lt;span class=&quot;math display&quot;&gt;\[
w^T_i\tilde w_k+b_i+\tilde b_k=log(X_{ik})\tag{7}
\]&lt;/span&gt; Eqn.(7) is a drastic simplification over Eqn.(1), but it is actually ill-defined since the logarithm diverges whenever its argument is zero. One resolution to this issue is to include an additive shift in the logarithm, &lt;span class=&quot;math inline&quot;&gt;\(log(X_{ik})\rightarrow log(1+X_{ik})\)&lt;/span&gt;, which maintains the sparsity of &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; while avoiding the divergences.&lt;/p&gt;
&lt;p&gt;A main drawback to this model is that it weighs all co-occurrences equally, even those that happen rarely or never. Such rare co-occurrences are noisy and carry less information than the more frequent ones —— yet even just the zero entries account for 75-95% of the data in &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt;, depending on the vocabulary size and corpus.&lt;/p&gt;
&lt;p&gt;They propose a new weighted least squares regression model that addresses these problems. Casting Eqn.(7) as a &lt;strong&gt;least squares problem&lt;/strong&gt; and introducing a weighting function &lt;span class=&quot;math inline&quot;&gt;\(f(X_{ij})\)&lt;/span&gt; into the cost function gives us the model: &lt;span class=&quot;math display&quot;&gt;\[
J=\sum^V_{i,j=1} f(X_{ij})(w^T_i\tilde w_j+b_i+\tilde b_j-logX_{ij})^2\tag{8}
\]&lt;/span&gt; where &lt;span class=&quot;math inline&quot;&gt;\(V\)&lt;/span&gt; is the size of the vocabulary. The weighting function should obey the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(f(0)=0\)&lt;/span&gt;. If &lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt; is viewed as a continuous function, it should vanish as &lt;span class=&quot;math inline&quot;&gt;\(x\rightarrow 0\)&lt;/span&gt; fast enough that the &lt;span class=&quot;math inline&quot;&gt;\(\lim_{x\to 0}f(x)log^2x\)&lt;/span&gt; is finite.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(f(x)\)&lt;/span&gt; should be non-decreasing so that rare co-occurrences are not overweighted.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(f(x)\)&lt;/span&gt; should be relatively small for large values of &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;, so that frequent co-occurrences are not overweighted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
f(x)=\begin{cases}
(x/x_{max})^\alpha &amp;amp; \text{if $x&amp;lt;x_{max}$} \\\\
1 &amp;amp; \text{otherwise}
\end{cases}\tag{9}
\]&lt;/span&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/images/35.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The performance of the model depends weakly on the cutoff, which we fix to &lt;span class=&quot;math inline&quot;&gt;\(x_{max}=100\)&lt;/span&gt; for all our experiments. We found that &lt;span class=&quot;math inline&quot;&gt;\(\alpha=3/4\)&lt;/span&gt; gives a modest improvement over a linear version with &lt;span class=&quot;math inline&quot;&gt;\(\alpha=1\)&lt;/span&gt;. Although we offer only empirical motivation for choosing the value 3/4, it is interesting that a similar fractional power scaling was found to give the best performance in (Mikolove et al., 2013a).&lt;/p&gt;
</description>
				<pubDate>Mon, 28 Mar 2016 00:00:00 +0800</pubDate>
				<link>/foundation/2016/03/28/glove.html</link>
				<guid isPermaLink="true">/foundation/2016/03/28/glove.html</guid>
			</item>
		
			<item>
				<title>Dynamic Memory Network</title>
				<description>&lt;svg id=&quot;drawing&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:svgjs=&quot;http://svgjs.com/svgjs&quot; width=&quot;813.25&quot; height=&quot;1245.217529296875&quot; viewBox=&quot;128.25 139 813.25 1245.217529296875&quot;&gt;
&lt;defs id=&quot;SvgjsDefs2131&quot;&gt;&lt;marker id=&quot;SvgjsMarker2197&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2198&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2204&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2205&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2237&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2238&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2244&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2245&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2284&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2285&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2295&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2296&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2318&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2319&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2325&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2326&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2332&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2333&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2339&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2340&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2350&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2351&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2357&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2358&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2364&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2365&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2375&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2376&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2382&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2383&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2389&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2390&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2396&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2397&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker2408&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath2409&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&quot;SvgjsG2132&quot;&gt;&lt;path id=&quot;SvgjsPath2133&quot; d=&quot;M128.25 139H941.5V1384.217529296875H128.25V139Z &quot; fill-opacity=&quot;1&quot; fill=&quot;#ffffff&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2134&quot;&gt;&lt;g id=&quot;SvgjsG2135&quot; transform=&quot;translate(167 589)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2136&quot; d=&quot;M0 0L716 0L716 126L0 126Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#99ccff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2137&quot; transform=&quot;translate(167 463)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2138&quot; d=&quot;M0 0L716 0L716 126L0 126Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#99ff99&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2139&quot; transform=&quot;translate(465 159)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2140&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#cc99ff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2141&quot; transform=&quot;matrix(1 0 0 1 10 10.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2142&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Dynamic&lt;/text&gt;&lt;text id=&quot;SvgjsText2143&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt; Memory &lt;/text&gt;&lt;text id=&quot;SvgjsText2144&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;44.5&quot;&gt; Network&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2145&quot; transform=&quot;translate(166 302)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2146&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#66ff66&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2147&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2148&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Input&lt;/text&gt;&lt;text id=&quot;SvgjsText2149&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt;Module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2150&quot; transform=&quot;translate(315.875 302)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2151&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#66ff66&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2152&quot; transform=&quot;matrix(1 0 0 1 10 10.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2153&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Semantic&lt;/text&gt;&lt;text id=&quot;SvgjsText2154&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt;Memory&lt;/text&gt;&lt;text id=&quot;SvgjsText2155&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;44.5&quot;&gt;Module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2156&quot; transform=&quot;translate(615.625 302)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2157&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#66ff66&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2158&quot; transform=&quot;matrix(1 0 0 1 10 10.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2159&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Episodic&lt;/text&gt;&lt;text id=&quot;SvgjsText2160&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt;Memory&lt;/text&gt;&lt;text id=&quot;SvgjsText2161&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;44.5&quot;&gt;Module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2162&quot; transform=&quot;translate(465 302)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2163&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#66ff66&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2164&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2165&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Question&lt;/text&gt;&lt;text id=&quot;SvgjsText2166&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt;Module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2167&quot; transform=&quot;translate(765.5 302)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2168&quot; d=&quot;M0 4Q0 0 4 0L111 0Q115 0 115 4L115 66Q115 70 111 70L4 70Q0 70 0 66Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#66ff66&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2169&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2170&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;Answer&lt;/text&gt;&lt;text id=&quot;SvgjsText2171&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#323232&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;28.25&quot;&gt;Module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2172&quot;&gt;&lt;path id=&quot;SvgjsPath2173&quot; d=&quot;M522.5 302L522.5 265.5L522.5 265.5L522.5 229 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2174&quot; transform=&quot;matrix(1 0 0 1 522.5 257.375)&quot;&gt;&lt;path id=&quot;SvgjsPath2175&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2176&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2177&quot;&gt;&lt;path id=&quot;SvgjsPath2178&quot; d=&quot;M223.5 302L223.5 272L823 272L823 302 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2179&quot; transform=&quot;matrix(1 0 0 1 523.25 263.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2180&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2181&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2182&quot;&gt;&lt;path id=&quot;SvgjsPath2183&quot; d=&quot;M373.375 302L373.375 272L673.125 272L673.125 302 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2184&quot; transform=&quot;matrix(1 0 0 1 523.25 263.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2185&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2186&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2187&quot; transform=&quot;translate(183.5 499)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2188&quot; d=&quot;M0 0L87.75 0L87.75 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2189&quot; transform=&quot;matrix(1 0 0 1 10 26.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2190&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.875&quot; y=&quot;12&quot;&gt;Text&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2191&quot; transform=&quot;translate(183.5 603)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2192&quot; d=&quot;M0 0L87.75 0L87.75 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2193&quot; transform=&quot;matrix(1 0 0 1 10 26.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2194&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.875&quot; y=&quot;12&quot;&gt;Question&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2195&quot;&gt;&lt;path id=&quot;SvgjsPath2196&quot; d=&quot;M271.25 534L374.625 534L374.625 534L462.7639320225002 534 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2197)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2199&quot; transform=&quot;matrix(1 0 0 1 367.00696601125014 525.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2200&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2201&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2202&quot;&gt;&lt;path id=&quot;SvgjsPath2203&quot; d=&quot;M271.25 638L374.625 638L374.625 638L462.7639320225002 638 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2204)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2206&quot; transform=&quot;matrix(1 0 0 1 367.00696601125014 629.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2207&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2208&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2209&quot; transform=&quot;translate(478 499)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2210&quot; d=&quot;M0 0L80 0L80 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2211&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2212&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;30&quot; y=&quot;12&quot;&gt;Word&lt;/text&gt;&lt;text id=&quot;SvgjsText2213&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;30&quot; y=&quot;28.25&quot;&gt;Vector&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2214&quot; transform=&quot;translate(478 603)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2215&quot; d=&quot;M0 0L80 0L80 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2216&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2217&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;30&quot; y=&quot;12&quot;&gt;Word&lt;/text&gt;&lt;text id=&quot;SvgjsText2218&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;30&quot; y=&quot;28.25&quot;&gt;Vector&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2219&quot; transform=&quot;translate(303.25 499)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2220&quot; d=&quot;M0 0L115 0L115 174L0 174Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffcc&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2221&quot; transform=&quot;matrix(1 0 0 1 10 78.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2222&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;GloVe&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2223&quot; transform=&quot;translate(779.5 499)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2224&quot; d=&quot;M0 0L87 0L87 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2225&quot; transform=&quot;matrix(1 0 0 1 10 10.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2226&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;12&quot;&gt;facts&lt;/text&gt;&lt;text id=&quot;SvgjsText2227&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;28.25&quot;&gt;hidden&lt;/text&gt;&lt;text id=&quot;SvgjsText2228&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;44.5&quot;&gt;state&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2229&quot; transform=&quot;translate(779.5 603)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2230&quot; d=&quot;M0 0L87 0L87 70L0 70Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2231&quot; transform=&quot;matrix(1 0 0 1 10 10.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2232&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;12&quot;&gt;question&lt;/text&gt;&lt;text id=&quot;SvgjsText2233&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;28.25&quot;&gt;hidden&lt;/text&gt;&lt;text id=&quot;SvgjsText2234&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;33.5&quot; y=&quot;44.5&quot;&gt;state&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2235&quot;&gt;&lt;path id=&quot;SvgjsPath2236&quot; d=&quot;M558 534L668.75 534L668.75 534L764.2639320225002 534 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2237)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2239&quot; transform=&quot;matrix(1 0 0 1 661.1319660112501 525.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2240&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2241&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2242&quot;&gt;&lt;path id=&quot;SvgjsPath2243&quot; d=&quot;M558 638L668.75 638L668.75 638L764.2639320225002 638 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2244)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2246&quot; transform=&quot;matrix(1 0 0 1 661.1319660112501 629.875)&quot;&gt;&lt;path id=&quot;SvgjsPath2247&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2248&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2249&quot; transform=&quot;translate(618 499)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2250&quot; d=&quot;M0 0L115 0L115 174L0 174Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffff99&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2251&quot; transform=&quot;matrix(1 0 0 1 10 78.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2252&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;47.5&quot; y=&quot;12&quot;&gt;GRU&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2253&quot; transform=&quot;translate(473 681)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2254&quot; d=&quot;M10.799999999999999 49C-9 35 3.6 24.5 8.1 21C6.300000000000001 3.5 28.8 0 37.8 7C45 -3.5 67.5 0 67.5 10.5C85.5 7 92.7 21 85.5 38.5C91.8 52.5 85.5 70 64.8 63C60.300000000000004 72.10000000000001 42.3 72.10000000000001 37.8 63C28.8 70 10.799999999999999 66.5 10.799999999999999 49Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2255&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2256&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;35&quot; y=&quot;12&quot;&gt;Question&lt;/text&gt;&lt;text id=&quot;SvgjsText2257&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;35&quot; y=&quot;28.25&quot;&gt;module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2258&quot; transform=&quot;translate(472.5 425)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2259&quot; d=&quot;M10.799999999999999 49C-9 35 3.6 24.5 8.1 21C6.300000000000001 3.5 28.8 0 37.8 7C45 -3.5 67.5 0 67.5 10.5C85.5 7 92.7 21 85.5 38.5C91.8 52.5 85.5 70 64.8 63C60.300000000000004 72.10000000000001 42.3 72.10000000000001 37.8 63C28.8 70 10.799999999999999 66.5 10.799999999999999 49Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2260&quot; transform=&quot;matrix(1 0 0 1 10 18.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2261&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;35&quot; y=&quot;12&quot;&gt;Input&lt;/text&gt;&lt;text id=&quot;SvgjsText2262&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;35&quot; y=&quot;28.25&quot;&gt;module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2263&quot; transform=&quot;translate(164.5 833.8699551569507)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2264&quot; d=&quot;M0 0L716 0L716 200.78251121076232L0 200.78251121076232Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#9999ff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2265&quot; transform=&quot;translate(470.97826086956525 790)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2266&quot; d=&quot;M12.365217391304347 58.00896860986547C-10.304347826086957 41.43497757847534 4.121739130434783 29.004484304932735 9.27391304347826 24.860986547085204C7.21304347826087 4.143497757847534 32.97391304347826 0 43.278260869565216 8.286995515695068C51.52173913043478 -4.143497757847534 77.28260869565217 0 77.28260869565217 12.430493273542602C97.89130434782608 8.286995515695068 106.13478260869566 24.860986547085204 97.89130434782608 45.57847533632288C105.10434782608695 62.15246636771301 97.89130434782608 82.86995515695068 74.19130434782608 74.58295964125561C69.0391304347826 85.35605381165921 48.43043478260869 85.35605381165921 43.278260869565216 74.58295964125561C32.97391304347826 82.86995515695068 12.365217391304347 78.72645739910314 12.365217391304347 58.00896860986547Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2267&quot; transform=&quot;matrix(1 0 0 1 10 17.05997757847534)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2268&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;41.52173913043478&quot; y=&quot;12&quot;&gt;episodic&lt;/text&gt;&lt;text id=&quot;SvgjsText2269&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;41.52173913043478&quot; y=&quot;28.25&quot;&gt;memory&lt;/text&gt;&lt;text id=&quot;SvgjsText2270&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;41.52173913043478&quot; y=&quot;44.5&quot;&gt;module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2271&quot; transform=&quot;translate(415 1122.652466367713)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2272&quot; d=&quot;M0 0L215 0L215 241.56502242152465L0 241.56502242152465Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ff99cc&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2273&quot; transform=&quot;translate(472.5 1080.2174887892377)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2274&quot; d=&quot;M12 58.00896860986547C-10 41.43497757847534 4 29.004484304932735 9 24.860986547085204C7.000000000000001 4.143497757847534 32 0 42 8.286995515695068C50 -4.143497757847534 75 0 75 12.430493273542602C95 8.286995515695068 103 24.860986547085204 95 45.57847533632288C102 62.15246636771301 95 82.86995515695068 72 74.58295964125561C67 85.35605381165921 47 85.35605381165921 42 74.58295964125561C32 82.86995515695068 12 78.72645739910314 12 58.00896860986547Z &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ff99cc&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2275&quot; transform=&quot;matrix(1 0 0 1 10 25.18497757847534)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2276&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;40&quot; y=&quot;12&quot;&gt;answer&lt;/text&gt;&lt;text id=&quot;SvgjsText2277&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;40&quot; y=&quot;28.25&quot;&gt;module&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2278&quot; transform=&quot;translate(469 1184.4349775784754)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2279&quot; d=&quot;M0 0L107 0L107 118L0 118Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffff99&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2280&quot; transform=&quot;matrix(1 0 0 1 10 50.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2281&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;43.5&quot; y=&quot;12&quot;&gt;GRU&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2282&quot;&gt;&lt;path id=&quot;SvgjsPath2283&quot; d=&quot;M576 1243.4349775784754L623 1243.4349775784754L623 1243.4349775784754L654.7639320225002 1243.4349775784754 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2284)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2286&quot; transform=&quot;matrix(1 0 0 1 615.3819660112501 1235.3099775784754)&quot;&gt;&lt;path id=&quot;SvgjsPath2287&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2288&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2289&quot; transform=&quot;translate(670 1218.4349775784754)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2290&quot; d=&quot;M0 25C0 -8.333333333333334 50 -8.333333333333334 50 25C50 58.333333333333336 0 58.333333333333336 0 25Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2291&quot; transform=&quot;matrix(1 0 0 1 10 12.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2292&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;20&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;15&quot; y=&quot;17&quot;&gt;y&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2293&quot;&gt;&lt;path id=&quot;SvgjsPath2294&quot; d=&quot;M695 1268.4349775784754L695 1332.4349775784754L522.5 1332.4349775784754L522.5 1317.671045555975 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2295)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2297&quot; transform=&quot;matrix(1 0 0 1 633.3680339887499 1324.3099775784754)&quot;&gt;&lt;path id=&quot;SvgjsPath2298&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2299&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2300&quot; transform=&quot;translate(410.52173913043475 899.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2301&quot; d=&quot;M0 35C0 -11.666666666666666 70 -11.666666666666666 70 35C70 81.66666666666667 0 81.66666666666667 0 35Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2302&quot; transform=&quot;matrix(1 0 0 1 10 27.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2303&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;25&quot; y=&quot;12&quot;&gt;episode&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2304&quot; transform=&quot;translate(775 904.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2305&quot; d=&quot;M0 0L61 0L61 60L0 60Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2306&quot; transform=&quot;matrix(1 0 0 1 10 21.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2307&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;20.5&quot; y=&quot;12&quot;&gt;Gate&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2308&quot; transform=&quot;translate(201.25 899.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2309&quot; d=&quot;M0 35C0 -11.666666666666666 70 -11.666666666666666 70 35C70 81.66666666666667 0 81.66666666666667 0 35Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2310&quot; transform=&quot;matrix(1 0 0 1 10 22.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2311&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;20&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;25&quot; y=&quot;17&quot;&gt;m&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2312&quot; transform=&quot;translate(654 904.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2313&quot; d=&quot;M0 0L61 0L61 60L0 60Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ff3333&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2314&quot; transform=&quot;matrix(1 0 0 1 10 21.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2315&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;20.5&quot; y=&quot;12&quot;&gt;GRU&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2316&quot;&gt;&lt;path id=&quot;SvgjsPath2317&quot; d=&quot;M866.5 534L896.5 534L896.5 934.2612107623319L851.2360679774998 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2318)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2320&quot; transform=&quot;matrix(1 0 0 1 896.5 733.637571392416)&quot;&gt;&lt;path id=&quot;SvgjsPath2321&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2322&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2323&quot;&gt;&lt;path id=&quot;SvgjsPath2324&quot; d=&quot;M236.25 899.2612107623319L236.25 878.2612107623319L805.5 878.2612107623319L805.5 889.025142784832 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2325)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2327&quot; transform=&quot;matrix(1 0 0 1 515.7569660112501 870.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2328&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2329&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2330&quot;&gt;&lt;path id=&quot;SvgjsPath2331&quot; d=&quot;M866.5 638L908.5 638L908.5 994.2612107623319L805.5 994.2612107623319L805.5 979.4972787398317 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2332)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2334&quot; transform=&quot;matrix(1 0 0 1 908.5 845.887571392416)&quot;&gt;&lt;path id=&quot;SvgjsPath2335&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2336&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2337&quot;&gt;&lt;path id=&quot;SvgjsPath2338&quot; d=&quot;M775 934.2612107623319L745 934.2612107623319L745 934.2612107623319L730.2360679774998 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2339)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2341&quot; transform=&quot;matrix(1 0 0 1 752.6180339887499 926.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2342&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2343&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2344&quot; transform=&quot;translate(526.5 899.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2345&quot; d=&quot;M0 35C0 -11.666666666666666 70 -11.666666666666666 70 35C70 81.66666666666667 0 81.66666666666667 0 35Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2346&quot; transform=&quot;matrix(1 0 0 1 10 22.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2347&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;20&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;25&quot; y=&quot;17&quot;&gt;h&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2348&quot;&gt;&lt;path id=&quot;SvgjsPath2349&quot; d=&quot;M654 934.2612107623319L625.25 934.2612107623319L625.25 934.2612107623319L611.7360679774998 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2350)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2352&quot; transform=&quot;matrix(1 0 0 1 632.8680339887499 926.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2353&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2354&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2355&quot;&gt;&lt;path id=&quot;SvgjsPath2356&quot; d=&quot;M561.5 969.2612107623319L561.5 999.2612107623319L684.5 999.2612107623319L684.5 979.4972787398317 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2357)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2359&quot; transform=&quot;matrix(1 0 0 1 617.8819660112501 991.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2360&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2361&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2362&quot;&gt;&lt;path id=&quot;SvgjsPath2363&quot; d=&quot;M526.5 934.2612107623319L503.5108695652174 934.2612107623319L503.5108695652174 934.2612107623319L495.7578071079345 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2364)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2366&quot; transform=&quot;matrix(1 0 0 1 511.12890355396723 926.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2367&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2368&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2369&quot; transform=&quot;translate(296.5 904.2612107623319)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath2370&quot; d=&quot;M0 0L61 0L61 60L0 60Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ff3333&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2371&quot; transform=&quot;matrix(1 0 0 1 10 21.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText2372&quot; font-family=&quot;Courier New,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;20.5&quot; y=&quot;12&quot;&gt;GRU&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2373&quot;&gt;&lt;path id=&quot;SvgjsPath2374&quot; d=&quot;M410.52173913043475 934.2612107623319L384.0108695652174 934.2612107623319L384.0108695652174 934.2612107623319L372.7360679774998 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2375)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2377&quot; transform=&quot;matrix(1 0 0 1 391.62890355396723 926.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2378&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2379&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2380&quot;&gt;&lt;path id=&quot;SvgjsPath2381&quot; d=&quot;M296.5 934.2612107623319L283.875 934.2612107623319L283.875 934.2612107623319L282.875 934.2612107623319 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2382)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2384&quot; transform=&quot;matrix(1 0 0 1 289.6875 926.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2385&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2386&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2387&quot;&gt;&lt;path id=&quot;SvgjsPath2388&quot; d=&quot;M236.25 969.2612107623319L236.25 999.2612107623319L327 999.2612107623319L327 979.4972787398317 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2389)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2391&quot; transform=&quot;matrix(1 0 0 1 276.5069660112501 991.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2392&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2393&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2394&quot;&gt;&lt;path id=&quot;SvgjsPath2395&quot; d=&quot;M201.25 934.2612107623319L148.25 934.2612107623319L148.25 1243.4349775784754L453.7639320225002 1243.4349775784754 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2396)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2398&quot; transform=&quot;matrix(1 0 0 1 148.25 1206.9800601816537)&quot;&gt;&lt;path id=&quot;SvgjsPath2399&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2400&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2401&quot;&gt;&lt;path id=&quot;SvgjsPath2402&quot; d=&quot;M327 904.2612107623319L327 891.2612107623319L684.5 891.2612107623319L684.5 904.2612107623319 &quot; stroke-dasharray=&quot;10 4&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2403&quot; transform=&quot;matrix(1 0 0 1 505.75 883.1362107623319)&quot;&gt;&lt;path id=&quot;SvgjsPath2404&quot; d=&quot;M0 0H32.75V17H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(-16.375 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2405&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;14&quot;&gt;same&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG2406&quot;&gt;&lt;path id=&quot;SvgjsPath2407&quot; d=&quot;M866.5 638L921.5 638L921.5 1066.7174887892377L310 1066.7174887892377L310 1243.4349775784754L453.7639320225002 1243.4349775784754 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker2408)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG2410&quot; transform=&quot;matrix(1 0 0 1 697.3680339887499 1058.5924887892377)&quot;&gt;&lt;path id=&quot;SvgjsPath2411&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText2412&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;
&lt;/svg&gt;
</description>
				<pubDate>Sun, 27 Mar 2016 00:00:00 +0800</pubDate>
				<link>/foundation/paper/2016/03/27/dynamic-memory-network.html</link>
				<guid isPermaLink="true">/foundation/paper/2016/03/27/dynamic-memory-network.html</guid>
			</item>
		
			<item>
				<title>CNTK pros cons</title>
				<description>&lt;h2 id=&quot;pros&quot;&gt;pros&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The concept of computation graph is clear, easy to understand.&lt;/li&gt;
&lt;li&gt;Building the network using NDL is fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cons&quot;&gt;cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The syntax of config file is not familiar, may be using the json format or python is better to learn.&lt;/li&gt;
&lt;li&gt;The document is not yet complete, and some command in the examples are not listed in the document.&lt;/li&gt;
&lt;li&gt;Text processing reader (i.e., LM sequence reader, LU sequence reader) is hared to understand, it’s kind of counterintuitive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, &lt;strong&gt;It is hard to master CNTK, and it is not the time to using it.&lt;/strong&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 07 Mar 2016 00:00:00 +0800</pubDate>
				<link>/tools/2016/03/07/cntk-pros-and-cons.html</link>
				<guid isPermaLink="true">/tools/2016/03/07/cntk-pros-and-cons.html</guid>
			</item>
		
			<item>
				<title>Computational Network Toolkit</title>
				<description>&lt;ul&gt;
&lt;li&gt;A computational network is a style of computation where data flows through a graph and computations happen in the nodes of the graph.&lt;/li&gt;
&lt;li&gt;A user specifies a network using a simple text configuration file. The configuration file specifies the type of network, where to find the input data, and how to optimize the parameters. All of these design parameters are fixed in the configuration file.&lt;/li&gt;
&lt;li&gt;All configuration values are specified as a name-value pair. A value can be a numeric, a string, a list, or even a block of configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;top-level-configurations&quot;&gt;&lt;a href=&quot;https://github.com/Microsoft/CNTK/wiki/Top-level-configurations&quot;&gt;Top level configurations&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;ModelDir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;$OutputDir$/Models&amp;quot;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#define a variable&lt;/span&gt;
modelPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;$ModelDir$/01_OneHidden&amp;quot;&lt;/span&gt;
command&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;mnistTrain
deviceId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# auto, -1 for CPU, &amp;gt;=0 to use a specific GPU&lt;/span&gt;
precision &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;float&amp;quot;&lt;/span&gt;
traceLevel &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# larger values mean more output&lt;/span&gt;
stderr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;c:\cntk\log\cntk&amp;quot;&lt;/span&gt;
NumCPUThreads &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# By default the value is 0, which means using what ever number of threads determined by MKL, ACML, or OpenMP. If a positive number is specified, the number of threads will not be larger than the value specified and the number of hardware concurrency. If a negative number is specified, the actual number of thread will be the sum of the number of hardware concurrency and this value floored at 1.&lt;/span&gt;

mnistTrain&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
    action&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;train&amp;quot;&lt;/span&gt;
    NDLNetworkBuilder&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
        networkDescription&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;c:\cntk\config\sample.ndl&amp;quot;&lt;/span&gt;
        run&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ndlMacroUse
    ]

    SGD&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
        modelPath&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;c:\cntk\model\mnist.cn&amp;quot;&lt;/span&gt;
        learningRatesPerMB&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.001&lt;/span&gt;
        minibatchSize&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;
        epochSize&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;60000&lt;/span&gt;
        maxEpochs&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;
    ]

    reader&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
        readerType&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;UCIFastReader&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;c:\cntk\data\mnist\mnist_train.txt&amp;quot;&lt;/span&gt;
        features&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
            dim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;784&lt;/span&gt;
            start&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        ]

        labels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[
            dim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            start&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
            labelDim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
            labelMappingFile&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;c:\cntk\data\mnist\mnistlabels.txt&amp;quot;&lt;/span&gt;
        ]
    ]
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#Variables&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#A variable can contain a matrix or scalar value. Variables are immutable, and assigning new values to an existing variable is not supported.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#The special node names FeatureNodes, LabelNodes, CriterionNodes, EvalNodes, OutputNodes are also reserved and may not be used as variable names.&lt;/span&gt;
SDim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;784&lt;/span&gt;
HDim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;
LDim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;#Inputs&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#Inputs are used to represent input data and labels associated with the samples. Input is a special function. They are represented as InputNodes internally and are not saved as part of the CN model.&lt;/span&gt;
features&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Input(SDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
labels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Input(LDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#Parameters&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#Parameters are matrices that constitue the learned model upon completion of training. They are represendted as LearnableParameterNodes internally and are saved as part of the model.&lt;/span&gt;
W0&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Parameter(HDim, SDim)
B0&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Parameter(HDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
W1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Parameter(LDim, HDim)
B1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Parameter(LDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#Functions&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#Functions describe computation steps. Functions are implemented as computation nodes internally.&lt;/span&gt;
Times1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Times(W0, features)
Plus1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Plus(Times1, B0)
RL1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;RectifiedLinear(Plus1)
Times2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Times(W1, RL1)
Plus2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Plus(Times2, B1)
&lt;span class=&quot;co&quot;&gt;#Training Criterion&lt;/span&gt;
CE&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;CrossEntropyWithSoftmax(labels, Plus2)
&lt;span class=&quot;co&quot;&gt;#Test Objective Function&lt;/span&gt;
ErrPredict&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ErrorPrediction(labels, Plus2)
&lt;span class=&quot;co&quot;&gt;#Special Nodes&lt;/span&gt;
FeatureNodes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(features)
LabelNodes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(labels)
CriterionNodes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(CE)
EvalNodes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(ErrPredict)
OutputNodes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(Plus2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;
&lt;h3 id=&quot;defining-macros&quot;&gt;Defining Macros&lt;/h3&gt;
&lt;p&gt;Macros can be defined as a one line function, or as a block of code.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;RFF(x1, w1, b1) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; RectifiedLinear(Plus(Times(w1, x1), b1))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A macro can also be defined as a block of code:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# Block macro to define a layer with a sigmoid activation function&lt;/span&gt;
DNNSigmoidLayer(inDim, outDim, x, parmScale) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    W &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; LearnableParameter(outDim, inDim, init&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;uniform&amp;quot;&lt;/span&gt;, initValueScale&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;parmScale) 
    b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; LearnableParameter(outDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,     init&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;uniform&amp;quot;&lt;/span&gt;, initValueScale&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;parmScale) 
    t &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Times(W, x)
    z &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Plus(t, b)
    y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Sigmoid(z)
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;FF(X1, W1, B1)
{
    F &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; RFF(X1, W1, B1)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#A macro may call another macro. However recursion(i.e., calling itself) is not supported. Semicolons are not required, but can be used if desired.&lt;/span&gt;
    T &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Times(W1, X1)
    FF &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Plus(T, B1) &lt;span class=&quot;co&quot;&gt;#The return value of a macro is defined by a local variable that has the same name as the macro. If no variable matches, the last variable in the macro will be returned.&lt;/span&gt;
}

FF.T &lt;span class=&quot;co&quot;&gt;#dot syntax.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;parameter-initialization&quot;&gt;Parameter initialization&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;B0 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Parameter(HDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, init&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;zero)
W0 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Parameter(Hdim, SDim, init&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;uniform&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;tagging-special-values&quot;&gt;Tagging special values&lt;/h3&gt;
&lt;p&gt;As an alternate to providing an array of special nodes that are used as features, labels, criteria, etc, optional parameters can be used.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;features&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Input(SDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, tag&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;feature&amp;quot;&lt;/span&gt;)
labels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Input(LDim, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, tag&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;label&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The acceptable tag names correspond to the special node types and are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;: feature input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;label&lt;/strong&gt;: label input&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;criterion&lt;/strong&gt;: training criteria&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eval&lt;/strong&gt;: evaluation node&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;: output node&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;model-editing-language-mel&quot;&gt;Model Editing Language (MEL)&lt;/h2&gt;
&lt;svg id=&quot;drawing&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:svgjs=&quot;http://svgjs.com/svgjs&quot; width=&quot;939&quot; height=&quot;622&quot; viewBox=&quot;56 58 939 622&quot;&gt;
&lt;defs id=&quot;SvgjsDefs1189&quot;&gt;&lt;marker id=&quot;SvgjsMarker1231&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1232&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker1240&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1241&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker1269&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1270&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker1280&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1281&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker1308&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1309&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;marker id=&quot;SvgjsMarker1340&quot; markerWidth=&quot;16.23606797749979&quot; markerHeight=&quot;10.550836550532098&quot; refX=&quot;-1&quot; refY=&quot;3.8990363547948754&quot; viewBox=&quot;-1 -1.3763819204711738 16.23606797749979 10.550836550532098&quot; orient=&quot;auto&quot; markerUnits=&quot;userSpaceOnUse&quot;&gt;&lt;path id=&quot;SvgjsPath1341&quot; d=&quot;M12 3.8990363547948754L0 7.798072709589751V0Z &quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#323232&quot; transform=&quot;matrix(1,0,0,1,0,0)&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&quot;SvgjsG1190&quot;&gt;&lt;path id=&quot;SvgjsPath1191&quot; d=&quot;M56 58H995V680H56V58Z &quot; fill-opacity=&quot;0&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1192&quot;&gt;&lt;g id=&quot;SvgjsG1193&quot; transform=&quot;translate(293 78)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1194&quot; d=&quot;M0 0L245 0L245 26L0 26Z &quot; stroke-dasharray=&quot;none&quot; stroke-width=&quot;0&quot; stroke=&quot;#323232&quot; fill=&quot;none&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1195&quot; transform=&quot;matrix(1 0 0 1 0 3)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1196&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;16&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;122.5&quot; y=&quot;17&quot;&gt;Model Editing Language&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1197&quot; transform=&quot;translate(278 123)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1198&quot; d=&quot;M0 0L255 0L255 35L0 35Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1199&quot; transform=&quot;matrix(1 0 0 1 10 9.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1200&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;117.5&quot; y=&quot;14&quot;&gt;Loading and Setting Default Models&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1201&quot; transform=&quot;translate(76 121)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1202&quot; d=&quot;M0 0L178 0L178 129L0 129Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1203&quot; transform=&quot;matrix(1 0 0 1 10 23.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1204&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;14&quot;&gt;If no model has been ex&lt;/text&gt;&lt;text id=&quot;SvgjsText1205&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;30.25&quot;&gt;plicitly set to be the defa&lt;/text&gt;&lt;text id=&quot;SvgjsText1206&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;46.5&quot;&gt;ult model, the last loade&lt;/text&gt;&lt;text id=&quot;SvgjsText1207&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;62.75&quot;&gt;d or created model is us&lt;/text&gt;&lt;text id=&quot;SvgjsText1208&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;79&quot;&gt;ed as a default.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1209&quot;&gt;&lt;path id=&quot;SvgjsPath1210&quot; d=&quot;M254 185.5L266 185.5L266 140.5L278 140.5 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1211&quot; transform=&quot;matrix(1 0 0 1 266 154.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1212&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1213&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1214&quot; transform=&quot;translate(556 96)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1215&quot; d=&quot;M0 0L419 0L419 89L0 89Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1216&quot; transform=&quot;matrix(1 0 0 1 10 20.125)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1217&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;14&quot;&gt;model1 = LoadModel(“c:\models\mymodel.cn”, format=“cntk”&lt;/text&gt;&lt;text id=&quot;SvgjsText1218&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;30.25&quot;&gt;)&lt;/text&gt;&lt;text id=&quot;SvgjsText1219&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;46.5&quot;&gt;SetDefaultModel(model1)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1220&quot;&gt;&lt;path id=&quot;SvgjsPath1221&quot; d=&quot;M556 140.5L544.5 140.5L544.5 140.5L533 140.5 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1222&quot; transform=&quot;matrix(1 0 0 1 544.5 132.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1223&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1224&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1225&quot; transform=&quot;translate(284.5 253)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1226&quot; d=&quot;M0 0L242 0L242 50L0 50Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1227&quot; transform=&quot;matrix(1 0 0 1 10 16.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1228&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;111&quot; y=&quot;14&quot;&gt;Viewing a Model File&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1229&quot;&gt;&lt;path id=&quot;SvgjsPath1230&quot; d=&quot;M405.5 158L405.5 177L405.5 177L405.5 180.7639320225002 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1231)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1233&quot; transform=&quot;matrix(1 0 0 1 405.5 161.25696601125009)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1234&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1235&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1236&quot; transform=&quot;translate(385.75 196)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1237&quot; d=&quot;M0 16L19.75 0L39.5 16L19.75 32Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1238&quot;&gt;&lt;path id=&quot;SvgjsPath1239&quot; d=&quot;M405.5 228L405.5 240.5L405.5 240.5L405.5 241.5 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1240)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1242&quot; transform=&quot;matrix(1 0 0 1 405.5 226.625)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1243&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1244&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1245&quot;&gt;&lt;path id=&quot;SvgjsPath1246&quot; d=&quot;M284.5 278L269.25 278L269.25 319L254 319 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1247&quot; transform=&quot;matrix(1 0 0 1 269.25 290.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1248&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1249&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1250&quot; transform=&quot;translate(76 268)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1251&quot; d=&quot;M0 0L178 0L178 102L0 102Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1252&quot; transform=&quot;matrix(1 0 0 1 10 18.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1253&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;14&quot;&gt;The Dump() command d&lt;/text&gt;&lt;text id=&quot;SvgjsText1254&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;30.25&quot;&gt;umps the node names a&lt;/text&gt;&lt;text id=&quot;SvgjsText1255&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;46.5&quot;&gt;nd optionally values to a&lt;/text&gt;&lt;text id=&quot;SvgjsText1256&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;79&quot; y=&quot;62.75&quot;&gt; readable file.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1257&quot;&gt;&lt;path id=&quot;SvgjsPath1258&quot; d=&quot;M526.5 278L553.75 278L553.75 278L581 278 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1259&quot; transform=&quot;matrix(1 0 0 1 553.75 269.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1260&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1261&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1262&quot; transform=&quot;translate(581 256)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1263&quot; d=&quot;M0 0L369 0L369 44L0 44Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1264&quot; transform=&quot;matrix(1 0 0 1 10 5.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1265&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;174.5&quot; y=&quot;14&quot;&gt;DumpModel(model1, “c:\temp\originalModel.dmp”, inc&lt;/text&gt;&lt;text id=&quot;SvgjsText1266&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;174.5&quot; y=&quot;30.25&quot;&gt;ludeData = true)&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1267&quot;&gt;&lt;path id=&quot;SvgjsPath1268&quot; d=&quot;M405.5 303L405.5 323L405.5 323L405.5 327.7639320225002 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1269)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1271&quot; transform=&quot;matrix(1 0 0 1 405.5 307.25696601125014)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1272&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1273&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1274&quot; transform=&quot;translate(343.25 343)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1275&quot; d=&quot;M0 0L124.5 0L124.5 52L0 52Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1276&quot; transform=&quot;matrix(1 0 0 1 10 17.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1277&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;52.25&quot; y=&quot;14&quot;&gt;Copy Nodes&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1278&quot;&gt;&lt;path id=&quot;SvgjsPath1279&quot; d=&quot;M425.25 212L553.75 212L553.75 369L482.9860679774998 369 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1280)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1282&quot; transform=&quot;matrix(1 0 0 1 553.75 253.50696601125014)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1283&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1284&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1285&quot;&gt;&lt;path id=&quot;SvgjsPath1286&quot; d=&quot;M343.25 369L326.125 369L326.125 535L309 535 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1287&quot; transform=&quot;matrix(1 0 0 1 326.125 443.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1288&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1289&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1290&quot; transform=&quot;translate(76 410)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1291&quot; d=&quot;M0 0L233 0L233 250L0 250Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1292&quot; transform=&quot;matrix(1 0 0 1 10 19.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1293&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;14&quot;&gt;The first parameter is the source o&lt;/text&gt;&lt;text id=&quot;SvgjsText1294&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;30.25&quot;&gt;f the copy and must exist, the sec&lt;/text&gt;&lt;text id=&quot;SvgjsText1295&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;46.5&quot;&gt;ond is the target and may or may&lt;/text&gt;&lt;text id=&quot;SvgjsText1296&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;62.75&quot;&gt; not exist. If it does exist, those m&lt;/text&gt;&lt;text id=&quot;SvgjsText1297&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;79&quot;&gt;atching nodes will be overwritten&lt;/text&gt;&lt;text id=&quot;SvgjsText1298&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;95.25&quot;&gt; by the copy. The optional parame&lt;/text&gt;&lt;text id=&quot;SvgjsText1299&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;111.5&quot;&gt;ter copy can be used to change t&lt;/text&gt;&lt;text id=&quot;SvgjsText1300&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;127.75&quot;&gt;his behavior, the options are: all -&lt;/text&gt;&lt;text id=&quot;SvgjsText1301&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;144&quot;&gt; the default, which copies all node&lt;/text&gt;&lt;text id=&quot;SvgjsText1302&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;160.25&quot;&gt; data and links, or value - which c&lt;/text&gt;&lt;text id=&quot;SvgjsText1303&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;176.5&quot;&gt;opies the node values only, leavin&lt;/text&gt;&lt;text id=&quot;SvgjsText1304&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;192.75&quot;&gt;g the connections between node&lt;/text&gt;&lt;text id=&quot;SvgjsText1305&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;106.5&quot; y=&quot;209&quot;&gt;s (if any) unchanged.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1306&quot;&gt;&lt;path id=&quot;SvgjsPath1307&quot; d=&quot;M405.5 395L405.5 425.5L503.7639320225002 425.5 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1308)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1310&quot; transform=&quot;matrix(1 0 0 1 439.38196601125014 417.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1311&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1312&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1313&quot; transform=&quot;translate(519 403)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1314&quot; d=&quot;M0 0L98 0L98 45L0 45Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1315&quot; transform=&quot;matrix(1 0 0 1 10 14.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1316&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;39&quot; y=&quot;14&quot;&gt;SetInput&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1317&quot; transform=&quot;translate(645 316)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1318&quot; d=&quot;M0 0L305 0L305 61L0 61Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1319&quot; transform=&quot;matrix(1 0 0 1 10 6.125)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1320&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;14&quot;&gt;To integrate this new layer into the model, th&lt;/text&gt;&lt;text id=&quot;SvgjsText1321&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;30.25&quot;&gt;e inputs and outputs of the nodes must&lt;/text&gt;&lt;text id=&quot;SvgjsText1322&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;46.5&quot;&gt;reset.&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1323&quot;&gt;&lt;path id=&quot;SvgjsPath1324&quot; d=&quot;M568 403L568 346.5L645 346.5 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1325&quot; transform=&quot;matrix(1 0 0 1 578.25 338.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1326&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1327&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1328&quot; transform=&quot;translate(718 402.5)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1329&quot; d=&quot;M0 0L232 0L232 46L0 46Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1330&quot; transform=&quot;matrix(1 0 0 1 10 6.75)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1331&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;14&quot;&gt;SetInput(L4.*.T, 1, L3.RL) &lt;/text&gt;&lt;text id=&quot;SvgjsText1332&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;30.25&quot;&gt;# Layer 3 output to Layer 4 input&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1333&quot;&gt;&lt;path id=&quot;SvgjsPath1334&quot; d=&quot;M718 425.5L667.5 425.5L667.5 425.5L617 425.5 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1335&quot; transform=&quot;matrix(1 0 0 1 667.5 417.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1336&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1337&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1338&quot;&gt;&lt;path id=&quot;SvgjsPath1339&quot; d=&quot;M568 448L568 480.5L568 480.5L568 497.7639320225002 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; marker-end=&quot;url(#SvgjsMarker1340)&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1342&quot; transform=&quot;matrix(1 0 0 1 568 464.75696601125014)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1343&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1344&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1345&quot; transform=&quot;translate(390.25 513)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1346&quot; d=&quot;M0 0L355.5 0L355.5 44L0 44Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1347&quot; transform=&quot;matrix(1 0 0 1 10 13.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1348&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;167.75&quot; y=&quot;14&quot;&gt;Adding New Nodes: In-line NDL and NDL Snippets&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1349&quot;&gt;&lt;path id=&quot;SvgjsPath1350&quot; d=&quot;M745.75 535L758.375 535L758.375 535L771 535 &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1351&quot; transform=&quot;matrix(1 0 0 1 758.375 526.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1352&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1353&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1354&quot; transform=&quot;translate(771 493)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1355&quot; d=&quot;M0 0L179 0L179 84L0 84Z &quot; stroke-dasharray=&quot;2 3&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1356&quot; transform=&quot;matrix(1 0 0 1 10 9.5)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1357&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;14&quot;&gt;NDL snippet:&lt;/text&gt;&lt;text id=&quot;SvgjsText1358&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;30.25&quot;&gt;[modelName]=[&lt;/text&gt;&lt;text id=&quot;SvgjsText1359&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;46.5&quot;&gt;#ndl commands go here&lt;/text&gt;&lt;text id=&quot;SvgjsText1360&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;start&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;62.75&quot;&gt;]&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1361&quot;&gt;&lt;path id=&quot;SvgjsPath1362&quot; d=&quot;M568 557L568 584.5L568 584.5L568 612 &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1363&quot; transform=&quot;matrix(1 0 0 1 568 576.375)&quot; fill=&quot;#ffffff&quot;&gt;&lt;path id=&quot;SvgjsPath1364&quot; d=&quot;M0 0H0V0H0V0Z &quot; fill=&quot;#ffffff&quot; transform=&quot;translate(0 0)&quot;&gt;&lt;/path&gt;&lt;text id=&quot;SvgjsText1365&quot; font-family=&quot;Microsoft Yahei,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;0&quot; y=&quot;0&quot;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;SvgjsG1366&quot; transform=&quot;translate(518 612)&quot; opacity=&quot;1&quot;&gt;&lt;path id=&quot;SvgjsPath1367&quot; d=&quot;M0 0L100 0L100 48L0 48Z &quot; stroke-dasharray=&quot;none&quot; stroke=&quot;#323232&quot; stroke-width=&quot;2&quot; fill=&quot;#ffffff&quot; opacity=&quot;1&quot;&gt;&lt;/path&gt;&lt;g id=&quot;SvgjsG1368&quot; transform=&quot;matrix(1 0 0 1 10 15.875)&quot; fill=&quot;#ffffff&quot;&gt;&lt;text id=&quot;SvgjsText1369&quot; font-family=&quot;Microsoft Yahei,SimHei,Arial,SimSun&quot; fill=&quot;#000000&quot; font-size=&quot;13&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; text-anchor=&quot;middle&quot; text-decoration=&quot;blink&quot; x=&quot;40&quot; y=&quot;14&quot;&gt;SaveModel&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;
&lt;/svg&gt;
</description>
				<pubDate>Fri, 19 Feb 2016 00:00:00 +0800</pubDate>
				<link>/tools/2016/02/19/cntk.html</link>
				<guid isPermaLink="true">/tools/2016/02/19/cntk.html</guid>
			</item>
		
			<item>
				<title>Correlations</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://www.statsoft.com/Textbook/Basic-Statistics#Correlations&quot;&gt;Origin Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-correlation&quot;&gt;What is Correlation?&lt;/h2&gt;
&lt;p&gt;Correlation is a measure of the relation between two or more variables. The measurement scales used should be at least interval scales, but other correlation coefficients are available to handle other types of data. Correlation coefficients can range from -1.00 to +1.00. The value of -1.00 represents a perfect &lt;code&gt;negative correlation&lt;/code&gt; while a value of +1.00 represents a perfect &lt;code&gt;positive correlation&lt;/code&gt;. A value of 0.00 represents a &lt;code&gt;lack of correlation&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;pearson-correlation.&quot;&gt;Pearson Correlation.&lt;/h2&gt;
&lt;p&gt;The most widely-used type of correlation coefficient is Pearson &lt;strong&gt;r&lt;/strong&gt; (Pearson, 1896), also called &lt;strong&gt;linear or product-moment correlation&lt;/strong&gt; (the term correlation was first used by Galton, 1888). Using non technical language, we can say that the correlation coefficient determines the extent to which values of two variables are “proportional” to each other. The value of the correlation (i.e., correlation coefficient) does not depend on the specific measurement units used; for example, the correlation between height and weight will be identical regardless of whether inches and pounds, or centimeters and kilograms are used as measurement units. &lt;strong&gt;Proportional means linearly related; that is, the correlation is high if it can be approximated by a straight line (sloped upwards or downwards).&lt;/strong&gt; This line is called the regression line or least squares line, because it is determined such that the sum of the squared distances of all the data points from the line is the lowest possible. Pearson correlation assumes that the two variables are measured on at least interval scales.&lt;/p&gt;
&lt;h2 id=&quot;how-to-interpret-the-values-of-correlations.&quot;&gt;How to Interpret the Values of Correlations.&lt;/h2&gt;
&lt;p&gt;As mentioned before, the correlation coefficient (&lt;span class=&quot;math inline&quot;&gt;\(r\)&lt;/span&gt;) represents the linear relationship between two variables. If the correlation coefficient is squared, then the resulting value (&lt;span class=&quot;math inline&quot;&gt;\(r^2\)&lt;/span&gt;, the coefficient of determination) will represent the proportion of common variation in the two variables (i.e., the “strength” or “magnitude” of the relationship).&lt;/p&gt;
</description>
				<pubDate>Sun, 14 Feb 2016 00:00:00 +0800</pubDate>
				<link>/foundation/2016/02/14/correlations.html</link>
				<guid isPermaLink="true">/foundation/2016/02/14/correlations.html</guid>
			</item>
		
	</channel>
</rss>
